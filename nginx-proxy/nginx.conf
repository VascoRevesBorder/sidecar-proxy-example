error_log /var/log/nginx/error.log info;
events {
  worker_connections  4096;
}

http {
  include    mime.types;
  access_log /var/log/nginx/access.log;

    server {
            listen 80 ;
            listen [::]:80 ;

            server_name _;

            auth_request /auth;

            # Define the location for the auth request, where Nginx will validate the token
            location = /auth {
              internal;  # This location is only accessible internally
              #proxy_pass http://auth-api:4000/auth;  # Your authentication service URL
              proxy_pass http://auth-api.default.svc.cluster.local:8000/auth;  # Your authentication service URL
              proxy_pass_request_body off;  # Do not send the original request body
              proxy_set_header Content-Length "";  # Avoid sending the content length
              proxy_set_header X-Original-URI $request_uri;  # Pass the original request URI
              proxy_set_header Authorization $http_authorization;  # Pass the Authorization header
            }

            # Add DNS resolver for Kubernetes DNS
            resolver 10.96.0.10 valid=10s;

            # Handle the actual request after successful authentication
            location / {
              proxy_pass http://apps-api.default.svc.cluster.local:3000$request_uri;  # Fixed for local development
              #proxy_pass http://$host$request_uri;  # Dynamically pass the original request URI
              proxy_set_header Authorization $http_authorization;  # Forward the token to the app if needed
            }

            # Optional: Handle what happens when the auth service rejects the request
            error_page 401 = @error401;

            location @error401 {
              return 401 "Unauthorized";
            }

            # Optional: Handle other errors like 403
            error_page 403 = @error403;

            location @error403 {
              return 403 "Forbidden";
            }
            
            #Proof of concept implementation
            # auth_basic "Protected by sidecar proxy!";
            # auth_basic_user_file htpasswd;
            # location / {
            #     proxy_pass http://localhost:3000/apps/list;
            # }
    }
}